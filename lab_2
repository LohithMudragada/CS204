#include <iostream>
#include<stdlib.h>
using namespace std;
struct node
{
    int x,y;
    struct node *ptr;
}*start=NULL;
string str[1000];
int v=0;
    struct node * createnode()
    {
        struct node * new1;
            new1=(struct node *)malloc(sizeof(struct node));
            return new1;
    }
    void addfirst(int a,int b)
    {
        if(start==NULL)
        {
            struct node * new1;
            new1=createnode();
            new1->x=a;
            new1->y=b;
            start=new1;
            new1->ptr=NULL;
        }
        else
        {
            struct node * new1,*temp;
            new1=createnode();
            new1->x=a;
            new1->y=b;
            new1->ptr=start;
            start=new1;
        }
    }
    void delfirst()
    {
        if(start==NULL)
        {
            cout<<"cannot be deleted"<<endl;
        }
        else
        {

        struct node *temp1;
        temp1=start;
        start=start->ptr;
        free(temp1);
        }
    }
    void search1(int a,int b)
    {
        struct node *temp;
        temp=start;
       while(temp!=NULL && (temp->x!=a || temp->y!=b))
       {
           temp=temp->ptr;
       }
       if(temp==NULL)
       {
           str[v]="False";
           v++;
       }
       else
       {
           str[v]="True";
           v++;
       }


    }
     void display(struct node * temp)
     {
            while(temp!=NULL)
            {
                cout<<temp->x<<" "<<temp->y<<endl;
                temp=temp->ptr;
            }
     }
     void search2(int d)
     {
         struct node *temp;
         temp=start;
         int a,b,c;
         while(temp!=NULL)
         {
             a=temp->x;
         b=temp->y;
         c=a*a+b*b;
             if(c<=d*d)
             {

                 str[v].push_back('(');
                 str[v].push_back(a+'0');
                 str[v].push_back(',');
                 str[v].push_back(b+'0');
                 str[v].push_back(')');
             }
             temp=temp->ptr;
         }
         v++;
     }
     void length()
     {
         struct node *temp;
         temp=start;
         int n=0;
         while(temp!=NULL)
         {
             n++;
             temp=temp->ptr;
         }
         while(n!=0)
         {
             str[v].push_back(n%10+'0');
             n=n/10;
         }
         v++;
     }
     void del(int a,int b)
     {
         if(start->x==a && start->y==b)
         {
             delfirst();
         }
         else
         {
         struct node *temp,*prev;
         temp=start;
         while(temp->x!=a || temp->y!=b)
         {
             prev=temp;
             temp=temp->ptr;
         }
         struct node *temp1;
         temp1=temp;
         prev->ptr=temp->ptr;
         free(temp1);
         }
     }
     int main()
     {
         int n;
         cin>>n;

            int c,d,a=1,j;
            while(n!=0)
            {
                cin>>a;
            switch(a)
            {
                case 1:
                cin>>c>>d;
                addfirst(c,d);
                break;
                case 2:
                delfirst();
                break;
                case 3:
                cin>>c>>d;
                del(c,d);
                break;
                case 4:
                cin>>c;
                search2(c);
                break;
                case 5:
                    cin>>c>>d;
                    search1(c,d);
                    break;
                case 6:
                    length();
                    break;
                default:
                    cout<<"invalid input"<<endl;

            }
            n--;


     }
     for(j=0;j<v;j++)
     {
         cout<<str[j]<<endl;
     }
     }
